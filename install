#!/usr/bin/bash

# install all files to ~ by symlinking them,
# this way, updating them is as simple as git pull
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: May 25, 2012
# License: MIT

# Run tests first to ensure .env file is valid
if [ -f ./tests ]; then
	./tests
	if [ $? -ne 0 ]; then
		echo "Error: Tests failed. Please fix the issues before proceeding."
		exit 1
	fi
else
	echo "Error: tests not found. Please ensure it exists in the current directory."
	exit 1
fi

# Create default ssh config file
if [ -f ./default_ssh_config ]; then
	./default_ssh_config
else
	echo "Error: default_ssh_config not found. Please ensure it exists in the current directory."
	exit 1
fi

# Source .env file
if [ -f ./.env ]; then
	. ./.env
else
	echo "Error: .env file not found. Please create it before running the script."
	exit 1
fi

if [ -f ./helpers ]; then
	. ./helpers
else
	echo "Error: helpers file not found. Please ensure it exists in the current directory."
	exit 1
fi

# makes "defaults" command print to screen
defaults() {
	echo defaults "$@"
	command defaults "$@"
}

# verbose ln, because `ln -v` is not portable
symlink() {
	printf '%55s -> %s\n' "${1/#${HOME}/\~}" "${2/#${HOME}/\~}"
	ln -nf "$@"
}

# Create array of files to link
dotfiles=($(find ./files/* -maxdepth 1 -type f ! -type d -printf '%f\n'))

# Link dotfiles
for f in "${dotfiles[@]}"; do
	# Check if a directory with file name exists and a symlink doesn't exist
	[[ -d ~/."${f}" && ! -L ~/."${f}" ]] && rm -r ~/."${f}"
	# Check file exists in files directory
	[[ -f ./files/"${f}" ]] && symlink "${PWD}/files/${f}" /home/${USER}/."${f}"
done

# Create array of folders to link
dotfolders=($(find ./files/* -maxdepth 1 -type d ! -type f -printf '%f\n'))

# Link dotfolders
for f in "${dotfolders[@]}"; do
	# Create array of files in folder
	if [[ "${f}" == "duckdns" && ! -n ${DUCK_TOKEN} ]]; then
		continue
	fi
	folder_files=($(find ./files/"${f}"/* -maxdepth 1 -type f ! -type d -printf '%f\n'))
	#Check if folder exists in files directory, and doesn't exist in home directory
	[[ -d ./files/"${f}" ]] && ! [[ -d "/home/${USER}/.${f}" ]] && mkdir "/home/${USER}/.${f}"
	# check if directory exists in home directory
	[[ -d "/home/${USER}/.${f}" ]] && for file in "${folder_files[@]}"; do
		# Check file exists in files directory
		[[ -f ./files/"${f}"/"${file}" ]] && symlink "${PWD}/files/${f}/${file}" /home/${USER}/."${f}"/"${file}"
	done
done

# Set up user as sudoer without password
echo "$USER ALL=(ALL:ALL) NOPASSWD: ALL" | sudo tee "/etc/sudoers.d/dont-prompt-${USER}-for-sudo-password" > /dev/null


# Set up crontab
if [[ -f /home/${USER}/.local/bin/yt-dlp ]]; then
	YT_DLP_STRING="0 3 * * 0 /home/${USER}/.local/bin/yt-dlp --config-location /home/${USER}/.dlp.conf -a /export/PlexMedia/Youtube/urls.txt --force-overwrite &> /home/${USER}/dlp.log"
fi

if [[ -n "${DUCK_TOKEN}" ]]; then
	DUCK_DNS_STRING="*/5 * * * * cd /home/${USER}/.duckdns/ && ./duck.sh >/dev/null 2>&1"
fi

# Save current crontab to file
crontab -l > /dev/null 2>&1
crontab -l > ./crontab_new

# Check if yt-dlp and duckdns are already in crontab
if ! grep -q -e "yt-dlp" -e "duckdns" ./crontab_new ; then
	echo "Installing new commands to crontab"
	# Check if yt-dlp and duckdns are installed
	if [ -f /home/${USER}/.local/bin/yt-dlp ] ; then
		echo "Installing yt-dlp command in cron"
		echo "${YT_DLP_STRING}" >> ./crontab_new
	fi
	if [ -f /home/${USER}/.duckdns/duck.sh ] ; then
		echo "Installing duckdns command in cron"
		echo "${DUCK_DNS_STRING}" >> ./crontab_new
	fi
fi

# Install new crontab and delete temp file if installation successful
crontab ./crontab_new && rm ./crontab_new

# Copy .env file to local servers and id files
for server in "${LOCAL_SERVERS[@]}"; do
	if [[ -z "${server}" || "${server}" == $(hostname) ]]; then
		continue
	fi

	if compare_files "./.env" "~/dotfiles/.env" "${server}" ; then
		echo ".env file is already up to date on ${server}, skipping copy."
	else 
		echo "Copying .env file to ${server}..."
		scp .env "${server}":~/dotfiles/.env > /dev/null && echo ".env file copied to ${server}"
	fi

	if compgen -G "/home/${USER}/.ssh/*.pub" > /dev/null; then
		if ! ssh -o PasswordAuthentication=no ${server} /bin/true; then
			ssh-copy-id -i /home/${USER}/.ssh/*.pub "${server}" &> /dev/null && echo "SSH keys copied to ${server}"
		else
			echo "SSH keys already exist on ${server}, skipping..."
		fi
	else 
		echo "NO SSH keys found, please create them first"
	fi
done
